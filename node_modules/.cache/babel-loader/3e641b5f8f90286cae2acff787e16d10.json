{"ast":null,"code":"import { isPlainObject, set, has, get } from 'lodash-es';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n\nfunction isObject(value) {\n  return isPlainObject(value);\n}\n\nfunction isTypeUndefined(value) {\n  return typeof value === 'undefined';\n}\n\nfunction isDate(value) {\n  return value instanceof Date;\n}\n\nfunction isFunction(value) {\n  return value !== null && typeof value === 'function';\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nfunction isRegex(value) {\n  return value instanceof RegExp;\n}\n\nfunction isValueStringEmpty(value) {\n  return value === '';\n}\n\nfunction isValueNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n\nfunction isValueUndefined(value) {\n  return value === undefined;\n}\n\nfunction noop() {// do nothing.\n}\n\nfunction protectAgainstParamReassignment(value) {\n  // Clone objects to avoid accidental param reassignment\n  if (isObject(value)) return _extends({}, value);\n  if (isArray(value)) return [].concat(value);\n  return value;\n}\n\nfunction isSame(a, b) {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    return a.every(function (item, index) {\n      return isSame(item, b[index]);\n    });\n  }\n\n  if (isFunction(a) && isFunction(b)) {\n    return a.toString() === b.toString();\n  }\n\n  if (isDate(a) && isDate(b)) {\n    return a.toString() === b.toString();\n  }\n\n  if (isObject(a) && isObject(b)) {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n\n    return Object.keys(a).every(function (key) {\n      return isSame(a[key], b[key]);\n    });\n  }\n\n  if (isRegex(a) && isRegex(b)) {\n    return a.toString() === b.toString();\n  }\n\n  return a === b;\n}\n\nfunction runRules(value, currentValues, validations, validationRules) {\n  var results = {\n    errors: [],\n    failed: [],\n    success: []\n  };\n  Object.keys(validations).forEach(function (validationName) {\n    var validationsVal = validations[validationName];\n    var validationRulesVal = validationRules[validationName];\n\n    var addToResults = function addToResults(validation) {\n      if (isString(validation)) {\n        results.errors.push(validation);\n        results.failed.push(validationName);\n      } else if (!validation) {\n        results.failed.push(validationName);\n      } else {\n        results.success.push(validationName);\n      }\n    };\n\n    if (validationRulesVal && isFunction(validationsVal)) {\n      throw new Error(\"Formsy does not allow you to override default validations: \" + validationName);\n    }\n\n    if (!validationRulesVal && !isFunction(validationsVal)) {\n      throw new Error(\"Formsy does not have the validation rule: \" + validationName);\n    }\n\n    if (isFunction(validationsVal)) {\n      return addToResults(validationsVal(currentValues, value));\n    }\n\n    return addToResults(validationRulesVal(currentValues, value, validationsVal));\n  });\n  return results;\n}\n\nfunction throttle(callback, interval) {\n  var enableCall = true;\n  return function () {\n    if (!enableCall) return;\n    enableCall = false;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n    setTimeout(function () {\n      return enableCall = true;\n    }, interval);\n  };\n}\n\nfunction _isExisty(value) {\n  return !isValueNullOrUndefined(value);\n}\n\nfunction isEmpty(value) {\n  if (isString(value)) {\n    return isValueStringEmpty(value);\n  }\n\n  if (isTypeUndefined(value)) {\n    return false;\n  }\n\n  return isValueUndefined(value);\n}\n\nfunction _isDefaultRequiredValue(value) {\n  return isString(value) ? isValueStringEmpty(value) : isValueNullOrUndefined(value);\n}\n\nfunction matchRegexp(_values, value, regexp) {\n  return !_isExisty(value) || isEmpty(value) || regexp.test(\"\" + value);\n}\n\nvar REGEX_PATTERNS = {\n  ALPHA: /^[A-Z]+$/i,\n  ALPHANUMERIC: /^[0-9A-Z]+$/i,\n  EMAIL: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i,\n  FLOAT: /^(?:[-+]?(?:\\d+))?(?:\\.\\d*)?(?:[eE][+-]?(?:\\d+))?$/,\n  INT: /^(?:[-+]?(?:0|[1-9]\\d*))$/,\n  NUMERIC: /^[-+]?(?:\\d*[.])?\\d+$/,\n  SPECIAL_WORDS: /^[\\sA-ZÀ-ÖØ-öø-ÿ]+$/i,\n  URL: /^(?:\\w+:)?\\/\\/([^\\s.]+\\.\\S{2}|localhost[:?\\d]*)\\S*$/i,\n  WORDS: /^[A-Z\\s]+$/i\n};\nvar validations = {\n  equals: function equals(_values, value, eql) {\n    return !_isExisty(value) || isEmpty(value) || value === eql;\n  },\n  equalsField: function equalsField(values, value, field) {\n    return value === values[field];\n  },\n  isAlpha: function isAlpha(values, value) {\n    return matchRegexp(values, value, REGEX_PATTERNS.ALPHA);\n  },\n  isAlphanumeric: function isAlphanumeric(values, value) {\n    return matchRegexp(values, value, REGEX_PATTERNS.ALPHANUMERIC);\n  },\n  isDefaultRequiredValue: function isDefaultRequiredValue(_values, value) {\n    return _isDefaultRequiredValue(value);\n  },\n  isEmail: function isEmail(values, value) {\n    return matchRegexp(values, value, REGEX_PATTERNS.EMAIL);\n  },\n  isEmptyString: function isEmptyString(_values, value) {\n    return isEmpty(value);\n  },\n  isExisty: function isExisty(_values, value) {\n    return _isExisty(value);\n  },\n  isFalse: function isFalse(_values, value) {\n    return value === false;\n  },\n  isFloat: function isFloat(values, value) {\n    return matchRegexp(values, value, REGEX_PATTERNS.FLOAT);\n  },\n  isInt: function isInt(values, value) {\n    return matchRegexp(values, value, REGEX_PATTERNS.INT);\n  },\n  isLength: function isLength(_values, value, length) {\n    return !_isExisty(value) || isEmpty(value) || value.length === length;\n  },\n  isNumeric: function isNumeric(values, value) {\n    return isNumber(value) || matchRegexp(values, value, REGEX_PATTERNS.NUMERIC);\n  },\n  isSpecialWords: function isSpecialWords(values, value) {\n    return matchRegexp(values, value, REGEX_PATTERNS.SPECIAL_WORDS);\n  },\n  isTrue: function isTrue(_values, value) {\n    return value === true;\n  },\n  isUndefined: function isUndefined(_values, value) {\n    return isValueUndefined(value);\n  },\n  isUrl: function isUrl(values, value) {\n    return matchRegexp(values, value, REGEX_PATTERNS.URL);\n  },\n  isWords: function isWords(values, value) {\n    return matchRegexp(values, value, REGEX_PATTERNS.WORDS);\n  },\n  matchRegexp: matchRegexp,\n  maxLength: function maxLength(_values, value, length) {\n    return !_isExisty(value) || value.length <= length;\n  },\n  minLength: function minLength(_values, value, length) {\n    return !_isExisty(value) || isEmpty(value) || value.length >= length;\n  }\n};\n\nvar addValidationRule = function addValidationRule(name, func) {\n  validations[name] = func;\n};\n\nvar noFormsyErrorMessage = 'Could not find Formsy Context Provider. Did you use withFormsy outside <Formsy />?';\n\nvar throwNoFormsyProvider = function throwNoFormsyProvider() {\n  // istanbul ignore next\n  throw new Error(noFormsyErrorMessage);\n};\n\nvar defaultValue = {\n  attachToForm: throwNoFormsyProvider,\n  detachFromForm: throwNoFormsyProvider,\n  isFormDisabled: true,\n  isValidValue: throwNoFormsyProvider,\n  validate: throwNoFormsyProvider,\n  runValidation: throwNoFormsyProvider\n};\nvar FormsyContext = /*#__PURE__*/React.createContext(defaultValue);\n/* eslint-disable react/default-props-match-prop-types */\n\nvar convertValidationsToObject = function convertValidationsToObject(validations) {\n  if (isString(validations)) {\n    return validations.split(/,(?![^{[]*[}\\]])/g).reduce(function (validationsAccumulator, validation) {\n      var args = validation.split(':');\n      var validateMethod = args.shift();\n      args = args.map(function (arg) {\n        try {\n          return JSON.parse(arg);\n        } catch (e) {\n          return arg; // It is a string if it can not parse it\n        }\n      });\n\n      if (args.length > 1) {\n        throw new Error('Formsy does not support multiple args on string validations. Use object format of validations instead.');\n      } // Avoid parameter reassignment\n\n\n      var validationsAccumulatorCopy = _extends({}, validationsAccumulator);\n\n      validationsAccumulatorCopy[validateMethod] = args.length ? args[0] : true;\n      return validationsAccumulatorCopy;\n    }, {});\n  }\n\n  return validations || {};\n};\n\nvar propTypes = {\n  innerRef: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  required: /*#__PURE__*/PropTypes.oneOfType([PropTypes.bool, PropTypes.object, PropTypes.string]),\n  validations: /*#__PURE__*/PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  value: PropTypes.any\n};\n\nfunction getDisplayName(component) {\n  return component.displayName || component.name || (isString(component) ? component : 'Component');\n}\n\nfunction withFormsy(WrappedComponent) {\n  var WithFormsyWrapper = /*#__PURE__*/function (_React$Component) {\n    _inheritsLoose(WithFormsyWrapper, _React$Component);\n\n    function WithFormsyWrapper(props) {\n      var _this;\n\n      _this = _React$Component.call(this, props) || this;\n\n      _this.getErrorMessage = function () {\n        var messages = _this.getErrorMessages();\n\n        return messages.length ? messages[0] : null;\n      };\n\n      _this.getErrorMessages = function () {\n        var validationError = _this.state.validationError;\n\n        if (!_this.isValid() || _this.showRequired()) {\n          return validationError || [];\n        }\n\n        return [];\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.getValue = function () {\n        return _this.state.value;\n      };\n\n      _this.setValidations = function (validations, required) {\n        // Add validations to the store itself as the props object can not be modified\n        _this.validations = convertValidationsToObject(validations) || {};\n        _this.requiredValidations = required === true ? {\n          isDefaultRequiredValue: required\n        } : convertValidationsToObject(required);\n      }; // By default, we validate after the value has been set.\n      // A user can override this and pass a second parameter of `false` to skip validation.\n\n\n      _this.setValue = function (value, validate) {\n        if (validate === void 0) {\n          validate = true;\n        }\n\n        var validateForm = _this.props.validate;\n\n        if (!validate) {\n          _this.setState({\n            value: value\n          });\n        } else {\n          _this.setState({\n            value: value,\n            isPristine: false\n          }, function () {\n            validateForm(_assertThisInitialized(_this));\n          });\n        }\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.hasValue = function () {\n        var value = _this.state.value;\n        return _isDefaultRequiredValue(value);\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.isFormDisabled = function () {\n        return _this.props.isFormDisabled;\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.isFormSubmitted = function () {\n        return _this.state.formSubmitted;\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.isPristine = function () {\n        return _this.state.isPristine;\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.isRequired = function () {\n        return !!_this.props.required;\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.isValid = function () {\n        return _this.state.isValid;\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.isValidValue = function (value) {\n        return _this.props.isValidValue(_assertThisInitialized(_this), value);\n      };\n\n      _this.resetValue = function () {\n        var pristineValue = _this.state.pristineValue;\n        var validate = _this.props.validate;\n\n        _this.setState({\n          value: pristineValue,\n          isPristine: true\n        }, function () {\n          validate(_assertThisInitialized(_this));\n        });\n      };\n\n      _this.showError = function () {\n        return !_this.showRequired() && !_this.isValid();\n      }; // eslint-disable-next-line react/destructuring-assignment\n\n\n      _this.showRequired = function () {\n        return _this.state.isRequired;\n      };\n\n      var runValidation = props.runValidation,\n          validations = props.validations,\n          required = props.required,\n          value = props.value;\n      _this.state = {\n        value: value\n      };\n\n      _this.setValidations(validations, required);\n\n      _this.state = _extends({\n        formSubmitted: false,\n        isPristine: true,\n        pristineValue: props.value,\n        value: props.value\n      }, runValidation(_assertThisInitialized(_this), props.value));\n      return _this;\n    }\n\n    var _proto = WithFormsyWrapper.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props = this.props,\n          name = _this$props.name,\n          attachToForm = _this$props.attachToForm;\n\n      if (!name) {\n        throw new Error('Form Input requires a name property when used');\n      }\n\n      attachToForm(this);\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      var props = this.props,\n          state = this.state;\n\n      var isChanged = function isChanged(a, b) {\n        return Object.keys(a).some(function (k) {\n          return a[k] !== b[k];\n        });\n      };\n\n      var isPropsChanged = isChanged(props, nextProps);\n      var isStateChanged = isChanged(state, nextState);\n      return isPropsChanged || isStateChanged;\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          validations = _this$props2.validations,\n          required = _this$props2.required,\n          validate = _this$props2.validate; // If the value passed has changed, set it. If value is not passed it will\n      // internally update, and this will never run\n\n      if (!isSame(value, prevProps.value)) {\n        this.setValue(value);\n      } // If validations or required is changed, run a new validation\n\n\n      if (!isSame(validations, prevProps.validations) || !isSame(required, prevProps.required)) {\n        this.setValidations(validations, required);\n        validate(this);\n      }\n    } // Detach it when component unmounts\n    ;\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      var detachFromForm = this.props.detachFromForm;\n      detachFromForm(this);\n    };\n\n    _proto.render = function render() {\n      var innerRef = this.props.innerRef;\n\n      var propsForElement = _extends({}, this.props, {\n        errorMessage: this.getErrorMessage(),\n        errorMessages: this.getErrorMessages(),\n        hasValue: this.hasValue(),\n        isFormDisabled: this.isFormDisabled(),\n        isFormSubmitted: this.isFormSubmitted(),\n        isPristine: this.isPristine(),\n        isRequired: this.isRequired(),\n        isValid: this.isValid(),\n        isValidValue: this.isValidValue,\n        resetValue: this.resetValue,\n        setValidations: this.setValidations,\n        setValue: this.setValue,\n        showError: this.showError(),\n        showRequired: this.showRequired(),\n        value: this.getValue()\n      });\n\n      if (innerRef) {\n        propsForElement.ref = innerRef;\n      }\n\n      return React.createElement(WrappedComponent, propsForElement);\n    };\n\n    return WithFormsyWrapper;\n  }(React.Component);\n\n  WithFormsyWrapper.displayName = \"Formsy(\" + getDisplayName(WrappedComponent) + \")\";\n  WithFormsyWrapper.propTypes = propTypes;\n  WithFormsyWrapper.defaultProps = {\n    innerRef: null,\n    required: false,\n    validationError: '',\n    validationErrors: {},\n    validations: null,\n    value: WrappedComponent.defaultValue\n  }; // eslint-disable-next-line react/display-name\n\n  return function (props) {\n    return React.createElement(FormsyContext.Consumer, null, function (contextValue) {\n      return React.createElement(WithFormsyWrapper, _extends({}, props, contextValue));\n    });\n  };\n}\n\nvar ONE_RENDER_FRAME = 66;\n\nvar Formsy = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Formsy, _React$Component);\n\n  function Formsy(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.prevInputNames = null;\n\n    _this.componentDidMount = function () {\n      _this.prevInputNames = _this.inputs.map(function (component) {\n        return component.props.name;\n      });\n\n      _this.validateForm();\n    };\n\n    _this.componentDidUpdate = function (prevProps) {\n      var _this$props = _this.props,\n          validationErrors = _this$props.validationErrors,\n          disabled = _this$props.disabled;\n\n      if (validationErrors && isObject(validationErrors) && Object.keys(validationErrors).length > 0) {\n        _this.setInputValidationErrors(validationErrors);\n      }\n\n      var newInputNames = _this.inputs.map(function (component) {\n        return component.props.name;\n      });\n\n      if (_this.prevInputNames && !isSame(_this.prevInputNames, newInputNames)) {\n        _this.prevInputNames = newInputNames;\n\n        _this.validateForm();\n      } // Keep the disabled value in state/context the same as from props\n\n\n      if (disabled !== prevProps.disabled) {\n        // eslint-disable-next-line\n        _this.setState(function (state) {\n          return _extends({}, state, {\n            contextValue: _extends({}, state.contextValue, {\n              isFormDisabled: disabled\n            })\n          });\n        });\n      }\n    };\n\n    _this.getCurrentValues = function () {\n      return _this.inputs.reduce(function (valueAccumulator, component) {\n        var name = component.props.name,\n            value = component.state.value; // eslint-disable-next-line no-param-reassign\n\n        valueAccumulator[name] = protectAgainstParamReassignment(value);\n        return valueAccumulator;\n      }, {});\n    };\n\n    _this.getModel = function () {\n      var currentValues = _this.getCurrentValues();\n\n      return _this.mapModel(currentValues);\n    };\n\n    _this.getPristineValues = function () {\n      return _this.inputs.reduce(function (valueAccumulator, component) {\n        var _component$props = component.props,\n            name = _component$props.name,\n            value = _component$props.value; // eslint-disable-next-line no-param-reassign\n\n        valueAccumulator[name] = protectAgainstParamReassignment(value);\n        return valueAccumulator;\n      }, {});\n    };\n\n    _this.setFormPristine = function (isPristine) {\n      _this.setState({\n        formSubmitted: !isPristine\n      }); // Iterate through each component and set it as pristine\n      // or \"dirty\".\n\n\n      _this.inputs.forEach(function (component) {\n        component.setState({\n          formSubmitted: !isPristine,\n          isPristine: isPristine\n        });\n      });\n    };\n\n    _this.setInputValidationErrors = function (errors) {\n      var preventExternalInvalidation = _this.props.preventExternalInvalidation;\n      var isValid = _this.state.isValid;\n\n      _this.inputs.forEach(function (component) {\n        var name = component.props.name;\n        component.setState({\n          isValid: !(name in errors),\n          validationError: isString(errors[name]) ? [errors[name]] : errors[name]\n        });\n      });\n\n      if (!preventExternalInvalidation && isValid) {\n        _this.setFormValidState(false);\n      }\n    };\n\n    _this.setFormValidState = function (allIsValid) {\n      var _this$props2 = _this.props,\n          onValid = _this$props2.onValid,\n          onInvalid = _this$props2.onInvalid;\n\n      _this.setState({\n        isValid: allIsValid\n      });\n\n      if (allIsValid) {\n        onValid();\n      } else {\n        onInvalid();\n      }\n    };\n\n    _this.isValidValue = function (component, value) {\n      return _this.runValidation(component, value).isValid;\n    }; // eslint-disable-next-line react/destructuring-assignment\n\n\n    _this.isFormDisabled = function () {\n      return _this.props.disabled;\n    };\n\n    _this.mapModel = function (model) {\n      var mapping = _this.props.mapping;\n\n      if (mapping) {\n        return mapping(model);\n      }\n\n      var returnModel = {};\n      Object.keys(model).forEach(function (key) {\n        set(returnModel, key, model[key]);\n      });\n      return returnModel;\n    };\n\n    _this.reset = function (model) {\n      _this.setFormPristine(true);\n\n      _this.resetModel(model);\n    };\n\n    _this.resetInternal = function (event) {\n      var onReset = _this.props.onReset;\n      event.preventDefault();\n\n      _this.reset();\n\n      if (onReset) {\n        onReset();\n      }\n    }; // Reset each key in the model to the original / initial / specified value\n\n\n    _this.resetModel = function (data) {\n      _this.inputs.forEach(function (component) {\n        var name = component.props.name;\n\n        if (data && has(data, name)) {\n          component.setValue(get(data, name));\n        } else {\n          component.resetValue();\n        }\n      });\n\n      _this.validateForm();\n    }; // Checks validation on current value or a passed value\n\n\n    _this.runValidation = function (component, value) {\n      if (value === void 0) {\n        value = component.state.value;\n      }\n\n      var validationErrors = _this.props.validationErrors;\n      var _component$props2 = component.props,\n          validationError = _component$props2.validationError,\n          componentValidationErrors = _component$props2.validationErrors,\n          name = _component$props2.name;\n\n      var currentValues = _this.getCurrentValues();\n\n      var validationResults = runRules(value, currentValues, component.validations, validations);\n      var requiredResults = runRules(value, currentValues, component.requiredValidations, validations);\n      var isRequired = Object.keys(component.requiredValidations).length ? !!requiredResults.success.length : false;\n      var isValid = !validationResults.failed.length && !(validationErrors && validationErrors[component.props.name]);\n      return {\n        isRequired: isRequired,\n        isValid: isRequired ? false : isValid,\n        validationError: function () {\n          if (isValid && !isRequired) {\n            return _this.emptyArray;\n          }\n\n          if (validationResults.errors.length) {\n            return validationResults.errors;\n          }\n\n          if (validationErrors && validationErrors[name]) {\n            return isString(validationErrors[name]) ? [validationErrors[name]] : validationErrors[name];\n          }\n\n          if (isRequired) {\n            var error = componentValidationErrors[requiredResults.success[0]] || validationError;\n            return error ? [error] : null;\n          }\n\n          if (validationResults.failed.length) {\n            return validationResults.failed.map(function (failed) {\n              return componentValidationErrors[failed] ? componentValidationErrors[failed] : validationError;\n            }).filter(function (x, pos, arr) {\n              return arr.indexOf(x) === pos;\n            }); // remove duplicates\n          } // This line is not reachable\n          // istanbul ignore next\n\n\n          return undefined;\n        }()\n      };\n    }; // Method put on each input component to register\n    // itself to the form\n\n\n    _this.attachToForm = function (component) {\n      if (_this.inputs.indexOf(component) === -1) {\n        _this.inputs.push(component);\n      }\n\n      var onChange = _this.props.onChange;\n      var canChange = _this.state.canChange; // Trigger onChange\n\n      if (canChange) {\n        onChange(_this.getModel(), _this.isChanged());\n      } // Will be triggered immediately & every one frame rate\n\n\n      _this.throttledValidateForm();\n    }; // Method put on each input component to unregister\n    // itself from the form\n\n\n    _this.detachFromForm = function (component) {\n      var componentPos = _this.inputs.indexOf(component);\n\n      if (componentPos !== -1) {\n        _this.inputs = _this.inputs.slice(0, componentPos).concat(_this.inputs.slice(componentPos + 1));\n      }\n\n      _this.validateForm();\n    }; // Checks if the values have changed from their initial value\n\n\n    _this.isChanged = function () {\n      return !isSame(_this.getPristineValues(), _this.getCurrentValues());\n    }; // Update model, submit to url prop and send the model\n\n\n    _this.submit = function (event) {\n      var _this$props3 = _this.props,\n          onSubmit = _this$props3.onSubmit,\n          onValidSubmit = _this$props3.onValidSubmit,\n          onInvalidSubmit = _this$props3.onInvalidSubmit,\n          preventDefaultSubmit = _this$props3.preventDefaultSubmit;\n      var isValid = _this.state.isValid;\n\n      if (preventDefaultSubmit && event && event.preventDefault) {\n        event.preventDefault();\n      } // Trigger form as not pristine.\n      // If any inputs have not been touched yet this will make them dirty\n      // so validation becomes visible (if based on isPristine)\n\n\n      _this.setFormPristine(false);\n\n      var model = _this.getModel();\n\n      onSubmit(model, _this.resetModel, _this.updateInputsWithError, event);\n\n      if (isValid) {\n        onValidSubmit(model, _this.resetModel, _this.updateInputsWithError, event);\n      } else {\n        onInvalidSubmit(model, _this.resetModel, _this.updateInputsWithError, event);\n      }\n    }; // Go through errors from server and grab the components\n    // stored in the inputs map. Change their state to invalid\n    // and set the serverError message\n\n\n    _this.updateInputsWithError = function (errors, invalidate) {\n      var preventExternalInvalidation = _this.props.preventExternalInvalidation;\n      var isValid = _this.state.isValid;\n      Object.entries(errors).forEach(function (_ref) {\n        var name = _ref[0],\n            error = _ref[1];\n\n        var component = _this.inputs.find(function (input) {\n          return input.props.name === name;\n        });\n\n        if (!component) {\n          throw new Error(\"You are trying to update an input that does not exist. Verify errors object with input names. \" + JSON.stringify(errors));\n        }\n\n        component.setState({\n          isValid: preventExternalInvalidation,\n          validationError: isString(error) ? [error] : error\n        });\n      });\n\n      if (invalidate && isValid) {\n        _this.setFormValidState(false);\n      }\n    }; // Set the value of components\n\n\n    _this.updateInputsWithValue = function (data, validate) {\n      _this.inputs.forEach(function (component) {\n        var name = component.props.name;\n\n        if (data && has(data, name)) {\n          component.setValue(get(data, name), validate);\n        }\n      });\n    }; // Use the binded values and the actual input value to\n    // validate the input and set its state. Then check the\n    // state of the form itself\n\n\n    _this.validate = function (component) {\n      var onChange = _this.props.onChange;\n      var canChange = _this.state.canChange; // Trigger onChange\n\n      if (canChange) {\n        onChange(_this.getModel(), _this.isChanged());\n      }\n\n      var validationState = _this.runValidation(component); // Run through the validations, split them up and call\n      // the validator IF there is a value or it is required\n\n\n      component.setState(validationState, _this.validateForm);\n    }; // Validate the form by going through all child input components\n    // and check their state\n\n\n    _this.validateForm = function () {\n      // We need a callback as we are validating all inputs again. This will\n      // run when the last component has set its state\n      var onValidationComplete = function onValidationComplete() {\n        var allIsValid = _this.inputs.every(function (component) {\n          return component.state.isValid;\n        });\n\n        _this.setFormValidState(allIsValid); // Tell the form that it can start to trigger change events\n\n\n        _this.setState({\n          canChange: true\n        });\n      }; // Run validation again in case affected by other inputs. The\n      // last component validated will run the onValidationComplete callback\n\n\n      _this.inputs.forEach(function (component, index) {\n        var validationState = _this.runValidation(component);\n\n        var isFinalInput = index === _this.inputs.length - 1;\n        var callback = isFinalInput ? onValidationComplete : null;\n        component.setState(validationState, callback);\n      }); // If there are no inputs, set state where form is ready to trigger\n      // change event. New inputs might be added later\n\n\n      if (!_this.inputs.length) {\n        _this.setState({\n          canChange: true\n        }, onValidationComplete);\n      }\n    };\n\n    _this.state = {\n      canChange: false,\n      isSubmitting: false,\n      isValid: true,\n      contextValue: {\n        attachToForm: _this.attachToForm,\n        detachFromForm: _this.detachFromForm,\n        isFormDisabled: props.disabled,\n        isValidValue: _this.isValidValue,\n        validate: _this.validate,\n        runValidation: _this.runValidation\n      }\n    };\n    _this.inputs = [];\n    _this.emptyArray = [];\n    _this.throttledValidateForm = throttle(_this.validateForm, ONE_RENDER_FRAME);\n    return _this;\n  }\n\n  var _proto = Formsy.prototype;\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        children = _this$props4.children,\n        disabled = _this$props4.disabled,\n        formElement = _this$props4.formElement,\n        nonFormsyProps = _objectWithoutPropertiesLoose(_this$props4, [\"children\", \"mapping\", \"onChange\", \"onInvalid\", \"onInvalidSubmit\", \"onReset\", \"onSubmit\", \"onValid\", \"onValidSubmit\", \"preventDefaultSubmit\", \"preventExternalInvalidation\", \"validationErrors\", \"disabled\", \"formElement\"]);\n\n    var contextValue = this.state.contextValue;\n    return React.createElement(FormsyContext.Provider, {\n      value: contextValue\n    }, React.createElement(formElement, _extends({\n      onReset: this.resetInternal,\n      onSubmit: this.submit\n    }, nonFormsyProps, {\n      disabled: disabled\n    }), children));\n  };\n\n  return Formsy;\n}(React.Component);\n\nFormsy.displayName = 'Formsy';\nFormsy.propTypes = {\n  disabled: PropTypes.bool,\n  mapping: PropTypes.func,\n  formElement: /*#__PURE__*/PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func]),\n  onChange: PropTypes.func,\n  onInvalid: PropTypes.func,\n  onInvalidSubmit: PropTypes.func,\n  onReset: PropTypes.func,\n  onSubmit: PropTypes.func,\n  onValid: PropTypes.func,\n  onValidSubmit: PropTypes.func,\n  preventDefaultSubmit: PropTypes.bool,\n  preventExternalInvalidation: PropTypes.bool,\n  validationErrors: PropTypes.object\n};\nFormsy.defaultProps = {\n  disabled: false,\n  mapping: null,\n  onChange: noop,\n  onInvalid: noop,\n  onInvalidSubmit: noop,\n  onReset: noop,\n  onSubmit: noop,\n  onValid: noop,\n  onValidSubmit: noop,\n  preventDefaultSubmit: true,\n  preventExternalInvalidation: false,\n  validationErrors: {},\n  formElement: 'form'\n};\nexport default Formsy;\nexport { addValidationRule, propTypes, validations as validationRules, withFormsy };","map":{"version":3,"sources":["../src/utils.ts","../src/validationRules.ts","../src/FormsyContext.ts","../src/withFormsy.ts","../src/Formsy.ts"],"names":["isArray","value","Array","isObject","isPlainObject","isTypeUndefined","isDate","isFunction","isString","isNumber","isRegex","isValueStringEmpty","isValueNullOrUndefined","isValueUndefined","noop","protectAgainstParamReassignment","isSame","a","b","Object","runRules","currentValues","validations","validationRules","results","errors","failed","success","validationsVal","validationRulesVal","addToResults","throttle","callback","interval","enableCall","args","setTimeout","isExisty","isEmpty","isDefaultRequiredValue","matchRegexp","_values","regexp","REGEX_PATTERNS","ALPHA","ALPHANUMERIC","EMAIL","FLOAT","INT","NUMERIC","SPECIAL_WORDS","URL","WORDS","equals","equalsField","values","isAlpha","isAlphanumeric","isEmail","isEmptyString","isFalse","isFloat","isInt","isLength","isNumeric","isSpecialWords","isTrue","isUndefined","isUrl","isWords","maxLength","minLength","addValidationRule","noFormsyErrorMessage","throwNoFormsyProvider","defaultValue","attachToForm","detachFromForm","isFormDisabled","isValidValue","validate","runValidation","React","convertValidationsToObject","validation","validateMethod","JSON","validationsAccumulatorCopy","propTypes","innerRef","PropTypes","name","required","any","component","utils","withFormsy","WrappedComponent","WithFormsyWrapper","Component","getDisplayName","validationError","validationErrors","props","formSubmitted","isPristine","pristineValue","componentDidMount","shouldComponentUpdate","state","isChanged","isPropsChanged","isStateChanged","componentDidUpdate","prevProps","componentWillUnmount","messages","validateForm","render","propsForElement","errorMessage","errorMessages","hasValue","isFormSubmitted","isRequired","isValid","resetValue","setValidations","setValue","showError","showRequired","FormsyContext","ONE_RENDER_FRAME","Formsy","disabled","mapping","formElement","onChange","onInvalid","onInvalidSubmit","onReset","onSubmit","onValid","onValidSubmit","preventDefaultSubmit","preventExternalInvalidation","object","canChange","isSubmitting","contextValue","newInputNames","valueAccumulator","allIsValid","returnModel","set","model","event","data","has","get","componentValidationErrors","validationResults","requiredResults","error","arr","componentPos","input","invalidate","validationState","onValidationComplete","isFinalInput","index","children","nonFormsyProps","submit"],"mappings":"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","sourcesContent":["import { isPlainObject } from 'lodash';\n\nimport { ValidationError, Validations, Values } from './interfaces';\n\nexport function isArray(value: unknown): value is unknown[] {\n  return Array.isArray(value);\n}\n\nexport function isObject(value: unknown): value is object {\n  return isPlainObject(value);\n}\n\nexport function isTypeUndefined(value: unknown): value is undefined {\n  return typeof value === 'undefined';\n}\n\nexport function isDate(value: unknown): value is Date {\n  return value instanceof Date;\n}\n\nexport function isFunction(value: unknown): value is Function {\n  return value !== null && typeof value === 'function';\n}\n\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n\nexport function isRegex(value: unknown): value is RegExp {\n  return value instanceof RegExp;\n}\n\nexport function isValueStringEmpty(value: string): boolean {\n  return value === '';\n}\n\nexport function isValueNullOrUndefined(value: unknown): boolean {\n  return value === null || value === undefined;\n}\n\nexport function isValueUndefined(value: unknown): boolean {\n  return value === undefined;\n}\n\nexport function noop() {\n  // do nothing.\n}\n\nexport function protectAgainstParamReassignment(value: unknown) {\n  // Clone objects to avoid accidental param reassignment\n  if (isObject(value)) return { ...value };\n  if (isArray(value)) return [...value];\n  return value;\n}\n\nexport function isSame(a: unknown, b: unknown) {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    return a.every((item, index) => isSame(item, b[index]));\n  }\n\n  if (isFunction(a) && isFunction(b)) {\n    return a.toString() === b.toString();\n  }\n\n  if (isDate(a) && isDate(b)) {\n    return a.toString() === b.toString();\n  }\n\n  if (isObject(a) && isObject(b)) {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n\n    return Object.keys(a).every((key) => isSame(a[key], b[key]));\n  }\n\n  if (isRegex(a) && isRegex(b)) {\n    return a.toString() === b.toString();\n  }\n\n  return a === b;\n}\n\ninterface RulesResult {\n  errors: ValidationError[];\n  failed: string[];\n  success: string[];\n}\n\nexport function runRules<V>(\n  value: V,\n  currentValues: Values,\n  validations: Validations<V>,\n  validationRules: Validations<V>,\n) {\n  const results: RulesResult = {\n    errors: [],\n    failed: [],\n    success: [],\n  };\n\n  Object.keys(validations).forEach((validationName) => {\n    const validationsVal = validations[validationName];\n    const validationRulesVal = validationRules[validationName];\n    const addToResults = (validation) => {\n      if (isString(validation)) {\n        results.errors.push(validation);\n        results.failed.push(validationName);\n      } else if (!validation) {\n        results.failed.push(validationName);\n      } else {\n        results.success.push(validationName);\n      }\n    };\n\n    if (validationRulesVal && isFunction(validationsVal)) {\n      throw new Error(`Formsy does not allow you to override default validations: ${validationName}`);\n    }\n\n    if (!validationRulesVal && !isFunction(validationsVal)) {\n      throw new Error(`Formsy does not have the validation rule: ${validationName}`);\n    }\n\n    if (isFunction(validationsVal)) {\n      return addToResults(validationsVal(currentValues, value));\n    }\n\n    return addToResults(validationRulesVal(currentValues, value, validationsVal));\n  });\n\n  return results;\n}\n\nexport function throttle(callback, interval) {\n  let enableCall = true;\n\n  return function (...args) {\n    if (!enableCall) return;\n\n    enableCall = false;\n    callback.apply(this, args);\n    setTimeout(() => (enableCall = true), interval);\n  };\n}\n","import { ValidationFunction, Values } from './interfaces';\nimport {\n  isNumber,\n  isString,\n  isTypeUndefined,\n  isValueNullOrUndefined,\n  isValueStringEmpty,\n  isValueUndefined,\n} from './utils';\n\nexport function isExisty<V>(value: V) {\n  return !isValueNullOrUndefined(value);\n}\n\nexport function isEmpty<V>(value: V) {\n  if (isString(value)) {\n    return isValueStringEmpty(value);\n  }\n  if (isTypeUndefined(value)) {\n    return false;\n  }\n  return isValueUndefined(value);\n}\n\nexport function isDefaultRequiredValue(value: unknown) {\n  return isString(value) ? isValueStringEmpty(value) : isValueNullOrUndefined(value);\n}\n\nexport function matchRegexp<V>(_values: Values, value: V, regexp: RegExp) {\n  return !isExisty(value) || isEmpty(value) || regexp.test(`${value}`);\n}\n\ninterface Validations<V> {\n  [key: string]: ValidationFunction<V>;\n}\n\nconst REGEX_PATTERNS = {\n  ALPHA: /^[A-Z]+$/i,\n  ALPHANUMERIC: /^[0-9A-Z]+$/i,\n  EMAIL: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i, // from http://emailregex.com/\n  FLOAT: /^(?:[-+]?(?:\\d+))?(?:\\.\\d*)?(?:[eE][+-]?(?:\\d+))?$/,\n  INT: /^(?:[-+]?(?:0|[1-9]\\d*))$/,\n  NUMERIC: /^[-+]?(?:\\d*[.])?\\d+$/,\n  SPECIAL_WORDS: /^[\\sA-ZÀ-ÖØ-öø-ÿ]+$/i,\n  URL: /^(?:\\w+:)?\\/\\/([^\\s.]+\\.\\S{2}|localhost[:?\\d]*)\\S*$/i,\n  WORDS: /^[A-Z\\s]+$/i,\n};\n\nconst validations: Validations<any> = {\n  equals: <V>(_values, value: V, eql: V) => !isExisty(value) || isEmpty(value) || value === eql,\n  equalsField: <V>(values, value: V, field: string) => value === values[field],\n  isAlpha: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.ALPHA),\n  isAlphanumeric: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.ALPHANUMERIC),\n  isDefaultRequiredValue: <V>(_values, value: V) => isDefaultRequiredValue(value),\n  isEmail: (values, value: string) => matchRegexp(values, value, REGEX_PATTERNS.EMAIL),\n  isEmptyString: (_values, value: string) => isEmpty(value),\n  isExisty: <V>(_values, value: V) => isExisty(value),\n  isFalse: (_values, value: boolean | string) => value === false,\n  isFloat: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.FLOAT),\n  isInt: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.INT),\n  isLength: (_values, value: string, length: number) => !isExisty(value) || isEmpty(value) || value.length === length,\n  isNumeric: <V>(values, value: V) => isNumber(value) || matchRegexp(values, value, REGEX_PATTERNS.NUMERIC),\n  isSpecialWords: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.SPECIAL_WORDS),\n  isTrue: (_values, value: boolean | string) => value === true,\n  isUndefined: <V>(_values, value: V) => isValueUndefined(value),\n  isUrl: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.URL),\n  isWords: <V>(values, value: V) => matchRegexp(values, value, REGEX_PATTERNS.WORDS),\n  matchRegexp,\n  maxLength: (_values, value: string, length: number) => !isExisty(value) || value.length <= length,\n  minLength: (_values, value: string, length: number) => !isExisty(value) || isEmpty(value) || value.length >= length,\n};\n\nexport const addValidationRule = <V>(name: string, func: ValidationFunction<V>) => {\n  validations[name] = func;\n};\n\nexport default validations;\n","import React from 'react';\nimport { FormsyContextInterface } from './interfaces';\n\nconst noFormsyErrorMessage = 'Could not find Formsy Context Provider. Did you use withFormsy outside <Formsy />?';\n\nconst throwNoFormsyProvider = () => {\n  // istanbul ignore next\n  throw new Error(noFormsyErrorMessage);\n};\n\nconst defaultValue = {\n  attachToForm: throwNoFormsyProvider,\n  detachFromForm: throwNoFormsyProvider,\n  isFormDisabled: true,\n  isValidValue: throwNoFormsyProvider,\n  validate: throwNoFormsyProvider,\n  runValidation: throwNoFormsyProvider,\n};\n\nexport default React.createContext<FormsyContextInterface>(defaultValue);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport FormsyContext from './FormsyContext';\nimport {\n  ComponentWithStaticAttributes,\n  FormsyContextInterface,\n  RequiredValidation,\n  ValidationError,\n  Validations,\n  WrappedComponentClass,\n} from './interfaces';\n\nimport * as utils from './utils';\nimport { isString } from './utils';\nimport { isDefaultRequiredValue } from './validationRules';\n\n/* eslint-disable react/default-props-match-prop-types */\n\nconst convertValidationsToObject = <V>(validations: false | Validations<V>): Validations<V> => {\n  if (isString(validations)) {\n    return validations.split(/,(?![^{[]*[}\\]])/g).reduce((validationsAccumulator, validation) => {\n      let args: string[] = validation.split(':');\n      const validateMethod: string = args.shift();\n\n      args = args.map((arg) => {\n        try {\n          return JSON.parse(arg);\n        } catch (e) {\n          return arg; // It is a string if it can not parse it\n        }\n      });\n\n      if (args.length > 1) {\n        throw new Error(\n          'Formsy does not support multiple args on string validations. Use object format of validations instead.',\n        );\n      }\n\n      // Avoid parameter reassignment\n      const validationsAccumulatorCopy: Validations<V> = { ...validationsAccumulator };\n      validationsAccumulatorCopy[validateMethod] = args.length ? args[0] : true;\n      return validationsAccumulatorCopy;\n    }, {});\n  }\n\n  return validations || {};\n};\n\nexport const propTypes = {\n  innerRef: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  required: PropTypes.oneOfType([PropTypes.bool, PropTypes.object, PropTypes.string]),\n  validations: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  value: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\n\nexport interface WrapperProps<V> {\n  innerRef?: (ref: React.Ref<any>) => void;\n  name: string;\n  required?: RequiredValidation<V>;\n  validationError?: ValidationError;\n  validationErrors?: { [key: string]: ValidationError };\n  validations?: Validations<V>;\n  value?: V;\n}\n\nexport interface WrapperState<V> {\n  [key: string]: unknown;\n  formSubmitted: boolean;\n  isPristine: boolean;\n  isRequired: boolean;\n  isValid: boolean;\n  pristineValue: V;\n  validationError: ValidationError[];\n  value: V;\n}\n\nexport interface InjectedProps<V> {\n  errorMessage: ValidationError;\n  errorMessages: ValidationError[];\n  hasValue: boolean;\n  isFormDisabled: boolean;\n  isFormSubmitted: boolean;\n  isPristine: boolean;\n  isRequired: boolean;\n  isValid: boolean;\n  isValidValue: (value: V) => boolean;\n  ref?: React.Ref<any>;\n  resetValue: () => void;\n  setValidations: (validations: Validations<V>, required: RequiredValidation<V>) => void;\n  setValue: (value: V, validate?: boolean) => void;\n  showError: boolean;\n  showRequired: boolean;\n}\n\nexport interface WrapperInstanceMethods<V> {\n  getErrorMessage: () => null | ValidationError;\n  getErrorMessages: () => ValidationError[];\n  getValue: () => V;\n  isFormDisabled: () => boolean;\n  isFormSubmitted: () => boolean;\n  isValid: () => boolean;\n  isValidValue: (value: V) => boolean;\n  setValue: (value: V, validate?: boolean) => void;\n}\n\nexport type PassDownProps<V> = WrapperProps<V> & InjectedProps<V>;\n\nfunction getDisplayName(component: WrappedComponentClass) {\n  return component.displayName || component.name || (utils.isString(component) ? component : 'Component');\n}\n\nexport default function withFormsy<T, V>(\n  WrappedComponent: React.ComponentType<T & PassDownProps<V>>,\n): React.ComponentType<Omit<T & WrapperProps<V>, keyof InjectedProps<V>>> {\n  class WithFormsyWrapper\n    extends React.Component<T & WrapperProps<V> & FormsyContextInterface, WrapperState<V>>\n    implements WrapperInstanceMethods<V> {\n    public validations?: Validations<V>;\n\n    public requiredValidations?: Validations<V>;\n\n    public static displayName = `Formsy(${getDisplayName(WrappedComponent)})`;\n\n    public static propTypes: any = propTypes;\n\n    public static defaultProps: any = {\n      innerRef: null,\n      required: false,\n      validationError: '',\n      validationErrors: {},\n      validations: null,\n      value: (WrappedComponent as ComponentWithStaticAttributes).defaultValue,\n    };\n\n    public constructor(props) {\n      super(props);\n      const { runValidation, validations, required, value } = props;\n\n      this.state = { value } as any;\n\n      this.setValidations(validations, required);\n\n      this.state = {\n        formSubmitted: false,\n        isPristine: true,\n        pristineValue: props.value,\n        value: props.value,\n        ...runValidation(this, props.value),\n      };\n    }\n\n    public componentDidMount() {\n      const { name, attachToForm } = this.props;\n\n      if (!name) {\n        throw new Error('Form Input requires a name property when used');\n      }\n\n      attachToForm(this);\n    }\n\n    public shouldComponentUpdate(nextProps, nextState) {\n      const { props, state } = this;\n      const isChanged = (a: object, b: object): boolean => Object.keys(a).some((k) => a[k] !== b[k]);\n      const isPropsChanged = isChanged(props, nextProps);\n      const isStateChanged = isChanged(state, nextState);\n\n      return isPropsChanged || isStateChanged;\n    }\n\n    public componentDidUpdate(prevProps) {\n      const { value, validations, required, validate } = this.props;\n\n      // If the value passed has changed, set it. If value is not passed it will\n      // internally update, and this will never run\n      if (!utils.isSame(value, prevProps.value)) {\n        this.setValue(value);\n      }\n\n      // If validations or required is changed, run a new validation\n      if (!utils.isSame(validations, prevProps.validations) || !utils.isSame(required, prevProps.required)) {\n        this.setValidations(validations, required);\n        validate(this);\n      }\n    }\n\n    // Detach it when component unmounts\n    public componentWillUnmount() {\n      const { detachFromForm } = this.props;\n      detachFromForm(this);\n    }\n\n    public getErrorMessage = (): ValidationError | null => {\n      const messages = this.getErrorMessages();\n      return messages.length ? messages[0] : null;\n    };\n\n    public getErrorMessages = (): ValidationError[] => {\n      const { validationError } = this.state;\n\n      if (!this.isValid() || this.showRequired()) {\n        return validationError || [];\n      }\n      return [];\n    };\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public getValue = (): V => this.state.value;\n\n    public setValidations = (validations: Validations<V>, required: RequiredValidation<V>): void => {\n      // Add validations to the store itself as the props object can not be modified\n      this.validations = convertValidationsToObject(validations) || {};\n      this.requiredValidations =\n        required === true ? { isDefaultRequiredValue: required } : convertValidationsToObject(required);\n    };\n\n    // By default, we validate after the value has been set.\n    // A user can override this and pass a second parameter of `false` to skip validation.\n    public setValue = (value: V, validate = true): void => {\n      const { validate: validateForm } = this.props;\n\n      if (!validate) {\n        this.setState({ value });\n      } else {\n        this.setState(\n          {\n            value,\n            isPristine: false,\n          },\n          () => {\n            validateForm(this);\n          },\n        );\n      }\n    };\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public hasValue = () => {\n      const { value } = this.state;\n      return isDefaultRequiredValue(value);\n    };\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isFormDisabled = (): boolean => this.props.isFormDisabled;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isFormSubmitted = (): boolean => this.state.formSubmitted;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isPristine = (): boolean => this.state.isPristine;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isRequired = (): boolean => !!this.props.required;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isValid = (): boolean => this.state.isValid;\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public isValidValue = (value: V) => this.props.isValidValue(this, value);\n\n    public resetValue = () => {\n      const { pristineValue } = this.state;\n      const { validate } = this.props;\n\n      this.setState(\n        {\n          value: pristineValue,\n          isPristine: true,\n        },\n        () => {\n          validate(this);\n        },\n      );\n    };\n\n    public showError = (): boolean => !this.showRequired() && !this.isValid();\n\n    // eslint-disable-next-line react/destructuring-assignment\n    public showRequired = (): boolean => this.state.isRequired;\n\n    public render() {\n      const { innerRef } = this.props;\n      const propsForElement: T & PassDownProps<V> = {\n        ...this.props,\n        errorMessage: this.getErrorMessage(),\n        errorMessages: this.getErrorMessages(),\n        hasValue: this.hasValue(),\n        isFormDisabled: this.isFormDisabled(),\n        isFormSubmitted: this.isFormSubmitted(),\n        isPristine: this.isPristine(),\n        isRequired: this.isRequired(),\n        isValid: this.isValid(),\n        isValidValue: this.isValidValue,\n        resetValue: this.resetValue,\n        setValidations: this.setValidations,\n        setValue: this.setValue,\n        showError: this.showError(),\n        showRequired: this.showRequired(),\n        value: this.getValue(),\n      };\n\n      if (innerRef) {\n        propsForElement.ref = innerRef;\n      }\n\n      return React.createElement(WrappedComponent, propsForElement);\n    }\n  }\n\n  // eslint-disable-next-line react/display-name\n  return (props) =>\n    React.createElement(FormsyContext.Consumer, null, (contextValue) => {\n      return React.createElement(WithFormsyWrapper, { ...props, ...contextValue });\n    });\n}\n","/* eslint-disable react/no-unused-state, react/default-props-match-prop-types */\nimport { get, has, set } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport FormsyContext from './FormsyContext';\nimport {\n  FormsyContextInterface,\n  IModel,\n  InputComponent,\n  IResetModel,\n  IUpdateInputsWithError,\n  IUpdateInputsWithValue,\n  ValidationError,\n} from './interfaces';\nimport { throttle, isObject, isString } from './utils';\nimport * as utils from './utils';\nimport validationRules from './validationRules';\nimport { PassDownProps } from './withFormsy';\n\ntype FormHTMLAttributesCleaned = Omit<React.FormHTMLAttributes<HTMLFormElement>, 'onChange' | 'onSubmit'>;\n\ntype OnSubmitCallback = (\n  model: IModel,\n  resetModel: IResetModel,\n  updateInputsWithError: IUpdateInputsWithError,\n  event: React.SyntheticEvent<React.FormHTMLAttributes<any>>,\n) => void;\n\ntype FormElementType =\n  | string\n  | React.ComponentType<{\n      onReset?: (e: React.SyntheticEvent) => void;\n      onSubmit?: (e: React.SyntheticEvent) => void;\n      disabled?: boolean;\n      children?: React.ReactChildren;\n    }>;\n\nexport interface FormsyProps extends FormHTMLAttributesCleaned {\n  disabled: boolean;\n  mapping: null | ((model: IModel) => IModel);\n  onChange: (model: IModel, isChanged: boolean) => void;\n  onInvalid: () => void;\n  onReset?: () => void;\n  onSubmit?: OnSubmitCallback;\n  onValidSubmit?: OnSubmitCallback;\n  onInvalidSubmit: OnSubmitCallback;\n  onValid: () => void;\n  preventDefaultSubmit?: boolean;\n  preventExternalInvalidation?: boolean;\n  validationErrors?: null | object;\n  formElement?: FormElementType;\n}\n\nexport interface FormsyState {\n  canChange: boolean;\n  contextValue: FormsyContextInterface;\n  formSubmitted?: boolean;\n  isPristine?: boolean;\n  isSubmitting: boolean;\n  isValid: boolean;\n}\n\nconst ONE_RENDER_FRAME = 66;\n\nexport class Formsy extends React.Component<FormsyProps, FormsyState> {\n  public inputs: InstanceType<any & PassDownProps<any>>[];\n\n  public emptyArray: any[];\n\n  public prevInputNames: any[] | null = null;\n\n  public static displayName = 'Formsy';\n\n  public static propTypes = {\n    disabled: PropTypes.bool,\n    mapping: PropTypes.func,\n    formElement: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func]),\n    onChange: PropTypes.func,\n    onInvalid: PropTypes.func,\n    onInvalidSubmit: PropTypes.func,\n    onReset: PropTypes.func,\n    onSubmit: PropTypes.func,\n    onValid: PropTypes.func,\n    onValidSubmit: PropTypes.func,\n    preventDefaultSubmit: PropTypes.bool,\n    preventExternalInvalidation: PropTypes.bool,\n    validationErrors: PropTypes.object, // eslint-disable-line\n  };\n\n  public static defaultProps: Partial<FormsyProps> = {\n    disabled: false,\n    mapping: null,\n    onChange: utils.noop,\n    onInvalid: utils.noop,\n    onInvalidSubmit: utils.noop,\n    onReset: utils.noop,\n    onSubmit: utils.noop,\n    onValid: utils.noop,\n    onValidSubmit: utils.noop,\n    preventDefaultSubmit: true,\n    preventExternalInvalidation: false,\n    validationErrors: {},\n    formElement: 'form',\n  };\n\n  private readonly throttledValidateForm: () => void;\n\n  public constructor(props: FormsyProps) {\n    super(props);\n    this.state = {\n      canChange: false,\n      isSubmitting: false,\n      isValid: true,\n      contextValue: {\n        attachToForm: this.attachToForm,\n        detachFromForm: this.detachFromForm,\n        isFormDisabled: props.disabled,\n        isValidValue: this.isValidValue,\n        validate: this.validate,\n        runValidation: this.runValidation,\n      },\n    };\n    this.inputs = [];\n    this.emptyArray = [];\n    this.throttledValidateForm = throttle(this.validateForm, ONE_RENDER_FRAME);\n  }\n\n  public componentDidMount = () => {\n    this.prevInputNames = this.inputs.map((component) => component.props.name);\n    this.validateForm();\n  };\n\n  public componentDidUpdate = (prevProps: FormsyProps) => {\n    const { validationErrors, disabled } = this.props;\n\n    if (validationErrors && isObject(validationErrors) && Object.keys(validationErrors).length > 0) {\n      this.setInputValidationErrors(validationErrors);\n    }\n\n    const newInputNames = this.inputs.map((component) => component.props.name);\n    if (this.prevInputNames && !utils.isSame(this.prevInputNames, newInputNames)) {\n      this.prevInputNames = newInputNames;\n      this.validateForm();\n    }\n\n    // Keep the disabled value in state/context the same as from props\n    if (disabled !== prevProps.disabled) {\n      // eslint-disable-next-line\n      this.setState((state) => ({\n        ...state,\n        contextValue: {\n          ...state.contextValue,\n          isFormDisabled: disabled,\n        },\n      }));\n    }\n  };\n\n  public getCurrentValues = () =>\n    this.inputs.reduce((valueAccumulator, component) => {\n      const {\n        props: { name },\n        state: { value },\n      } = component;\n      // eslint-disable-next-line no-param-reassign\n      valueAccumulator[name] = utils.protectAgainstParamReassignment(value);\n      return valueAccumulator;\n    }, {});\n\n  public getModel = () => {\n    const currentValues = this.getCurrentValues();\n    return this.mapModel(currentValues);\n  };\n\n  public getPristineValues = () =>\n    this.inputs.reduce((valueAccumulator, component) => {\n      const {\n        props: { name, value },\n      } = component;\n      // eslint-disable-next-line no-param-reassign\n      valueAccumulator[name] = utils.protectAgainstParamReassignment(value);\n      return valueAccumulator;\n    }, {});\n\n  public setFormPristine = (isPristine: boolean) => {\n    this.setState({\n      formSubmitted: !isPristine,\n    });\n\n    // Iterate through each component and set it as pristine\n    // or \"dirty\".\n    this.inputs.forEach((component) => {\n      component.setState({\n        formSubmitted: !isPristine,\n        isPristine,\n      });\n    });\n  };\n\n  public setInputValidationErrors = (errors) => {\n    const { preventExternalInvalidation } = this.props;\n    const { isValid } = this.state;\n\n    this.inputs.forEach((component) => {\n      const { name } = component.props;\n      component.setState({\n        isValid: !(name in errors),\n        validationError: isString(errors[name]) ? [errors[name]] : errors[name],\n      });\n    });\n    if (!preventExternalInvalidation && isValid) {\n      this.setFormValidState(false);\n    }\n  };\n\n  public setFormValidState = (allIsValid: boolean) => {\n    const { onValid, onInvalid } = this.props;\n\n    this.setState({\n      isValid: allIsValid,\n    });\n\n    if (allIsValid) {\n      onValid();\n    } else {\n      onInvalid();\n    }\n  };\n\n  public isValidValue = (component, value) => this.runValidation(component, value).isValid;\n\n  // eslint-disable-next-line react/destructuring-assignment\n  public isFormDisabled = () => this.props.disabled;\n\n  public mapModel = (model: IModel): IModel => {\n    const { mapping } = this.props;\n\n    if (mapping) {\n      return mapping(model);\n    }\n\n    const returnModel = {};\n    Object.keys(model).forEach((key) => {\n      set(returnModel, key, model[key]);\n    });\n    return returnModel;\n  };\n\n  public reset = (model?: IModel) => {\n    this.setFormPristine(true);\n    this.resetModel(model);\n  };\n\n  private resetInternal = (event) => {\n    const { onReset } = this.props;\n\n    event.preventDefault();\n    this.reset();\n    if (onReset) {\n      onReset();\n    }\n  };\n\n  // Reset each key in the model to the original / initial / specified value\n  private resetModel: IResetModel = (data) => {\n    this.inputs.forEach((component) => {\n      const { name } = component.props;\n      if (data && has(data, name)) {\n        component.setValue(get(data, name));\n      } else {\n        component.resetValue();\n      }\n    });\n    this.validateForm();\n  };\n\n  // Checks validation on current value or a passed value\n  public runValidation = <V>(\n    component: InputComponent<V>,\n    value = component.state.value,\n  ): { isRequired: boolean; isValid: boolean; validationError: ValidationError[] } => {\n    const { validationErrors } = this.props;\n    const { validationError, validationErrors: componentValidationErrors, name } = component.props;\n    const currentValues = this.getCurrentValues();\n    const validationResults = utils.runRules(value, currentValues, component.validations, validationRules);\n    const requiredResults = utils.runRules(value, currentValues, component.requiredValidations, validationRules);\n    const isRequired = Object.keys(component.requiredValidations).length ? !!requiredResults.success.length : false;\n    const isValid = !validationResults.failed.length && !(validationErrors && validationErrors[component.props.name]);\n\n    return {\n      isRequired,\n      isValid: isRequired ? false : isValid,\n      validationError: (() => {\n        if (isValid && !isRequired) {\n          return this.emptyArray;\n        }\n\n        if (validationResults.errors.length) {\n          return validationResults.errors;\n        }\n\n        if (validationErrors && validationErrors[name]) {\n          return isString(validationErrors[name]) ? [validationErrors[name]] : validationErrors[name];\n        }\n\n        if (isRequired) {\n          const error = componentValidationErrors[requiredResults.success[0]] || validationError;\n          return error ? [error] : null;\n        }\n\n        if (validationResults.failed.length) {\n          return validationResults.failed\n            .map((failed) => (componentValidationErrors[failed] ? componentValidationErrors[failed] : validationError))\n            .filter((x, pos, arr) => arr.indexOf(x) === pos); // remove duplicates\n        }\n\n        // This line is not reachable\n        // istanbul ignore next\n        return undefined;\n      })(),\n    };\n  };\n\n  // Method put on each input component to register\n  // itself to the form\n  public attachToForm = (component) => {\n    if (this.inputs.indexOf(component) === -1) {\n      this.inputs.push(component);\n    }\n\n    const { onChange } = this.props;\n    const { canChange } = this.state;\n\n    // Trigger onChange\n    if (canChange) {\n      onChange(this.getModel(), this.isChanged());\n    }\n\n    // Will be triggered immediately & every one frame rate\n    this.throttledValidateForm();\n  };\n\n  // Method put on each input component to unregister\n  // itself from the form\n  public detachFromForm = <V>(component: InputComponent<V>) => {\n    const componentPos = this.inputs.indexOf(component);\n\n    if (componentPos !== -1) {\n      this.inputs = this.inputs.slice(0, componentPos).concat(this.inputs.slice(componentPos + 1));\n    }\n\n    this.validateForm();\n  };\n\n  // Checks if the values have changed from their initial value\n  public isChanged = () => !utils.isSame(this.getPristineValues(), this.getCurrentValues());\n\n  // Update model, submit to url prop and send the model\n  public submit = (event?: React.SyntheticEvent) => {\n    const { onSubmit, onValidSubmit, onInvalidSubmit, preventDefaultSubmit } = this.props;\n    const { isValid } = this.state;\n\n    if (preventDefaultSubmit && event && event.preventDefault) {\n      event.preventDefault();\n    }\n\n    // Trigger form as not pristine.\n    // If any inputs have not been touched yet this will make them dirty\n    // so validation becomes visible (if based on isPristine)\n    this.setFormPristine(false);\n    const model = this.getModel();\n    onSubmit(model, this.resetModel, this.updateInputsWithError, event);\n\n    if (isValid) {\n      onValidSubmit(model, this.resetModel, this.updateInputsWithError, event);\n    } else {\n      onInvalidSubmit(model, this.resetModel, this.updateInputsWithError, event);\n    }\n  };\n\n  // Go through errors from server and grab the components\n  // stored in the inputs map. Change their state to invalid\n  // and set the serverError message\n  public updateInputsWithError: IUpdateInputsWithError = (errors, invalidate) => {\n    const { preventExternalInvalidation } = this.props;\n    const { isValid } = this.state;\n\n    Object.entries(errors).forEach(([name, error]) => {\n      const component = this.inputs.find((input) => input.props.name === name);\n      if (!component) {\n        throw new Error(\n          `You are trying to update an input that does not exist. Verify errors object with input names. ${JSON.stringify(\n            errors,\n          )}`,\n        );\n      }\n      component.setState({\n        isValid: preventExternalInvalidation,\n        validationError: utils.isString(error) ? [error] : error,\n      });\n    });\n\n    if (invalidate && isValid) {\n      this.setFormValidState(false);\n    }\n  };\n\n  // Set the value of components\n  public updateInputsWithValue: IUpdateInputsWithValue<any> = (data, validate) => {\n    this.inputs.forEach((component) => {\n      const { name } = component.props;\n      if (data && has(data, name)) {\n        component.setValue(get(data, name), validate);\n      }\n    });\n  };\n\n  // Use the binded values and the actual input value to\n  // validate the input and set its state. Then check the\n  // state of the form itself\n  public validate = <V>(component: InputComponent<V>) => {\n    const { onChange } = this.props;\n    const { canChange } = this.state;\n\n    // Trigger onChange\n    if (canChange) {\n      onChange(this.getModel(), this.isChanged());\n    }\n\n    const validationState = this.runValidation<V>(component);\n    // Run through the validations, split them up and call\n    // the validator IF there is a value or it is required\n    component.setState(validationState, this.validateForm);\n  };\n\n  // Validate the form by going through all child input components\n  // and check their state\n  public validateForm = () => {\n    // We need a callback as we are validating all inputs again. This will\n    // run when the last component has set its state\n    const onValidationComplete = () => {\n      const allIsValid = this.inputs.every((component) => component.state.isValid);\n\n      this.setFormValidState(allIsValid);\n\n      // Tell the form that it can start to trigger change events\n      this.setState({\n        canChange: true,\n      });\n    };\n\n    // Run validation again in case affected by other inputs. The\n    // last component validated will run the onValidationComplete callback\n    this.inputs.forEach((component, index) => {\n      const validationState = this.runValidation(component);\n      const isFinalInput = index === this.inputs.length - 1;\n      const callback = isFinalInput ? onValidationComplete : null;\n      component.setState(validationState, callback);\n    });\n\n    // If there are no inputs, set state where form is ready to trigger\n    // change event. New inputs might be added later\n    if (!this.inputs.length) {\n      this.setState(\n        {\n          canChange: true,\n        },\n        onValidationComplete,\n      );\n    }\n  };\n\n  public render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      children,\n      mapping,\n      onChange,\n      onInvalid,\n      onInvalidSubmit,\n      onReset,\n      onSubmit,\n      onValid,\n      onValidSubmit,\n      preventDefaultSubmit,\n      preventExternalInvalidation,\n      validationErrors,\n      disabled,\n      formElement,\n      ...nonFormsyProps\n    } = this.props;\n    const { contextValue } = this.state;\n\n    return React.createElement(\n      FormsyContext.Provider,\n      {\n        value: contextValue,\n      },\n      React.createElement(\n        formElement,\n        {\n          onReset: this.resetInternal,\n          onSubmit: this.submit,\n          ...nonFormsyProps,\n          disabled,\n        },\n        children,\n      ),\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}